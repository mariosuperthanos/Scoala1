
/* eslint-disable */
#include <iostream>
#include <algorithm>
#include <fstream>
#include <vector>
#include <cmath>
#include <bits/stdc++.h>

using namespace std;
long long n, A, B, counter = 0, j;
vector<long long> v(0, 0);

// test
// long long n = 6, A = 5, B = 6, counter = 0, j = n - 1;
// vector<long long> v = {1, 2, 3, 4, 5, 6};

void citire()
{
  cin >> n;
  v.resize(n);
  for (int i = 0; i < n; i++)
  {
    cin >> v[i];
  }
  sort(v.begin(), v.end());
  cin >> A >> B;
  j=n-1;
}

// returneaza pozitia celui mai mare numar mai mic sau egal cu arg.
long long binarySearch(long long numarCautat)
{
  if (numarCautat <= 0)
    return 0; // poz celui mai mic nr.
  // long long st=0, dr = n - 1, mij;
  // cu cat indicele i avanseaza spre dreapta, cu atat j va fi mai mic, deci nu e necesar sa resetez j
  for (int i = 0; i < n; i++)
  {
    while (v[j] > numarCautat)
    {
      j--;
    }
    return j;
  }
  return -1;
  // return st-1;
  // return dr;
}

void rezolvare()
{
  long long diferenta;
  // determin numarul de perechi cu suma <=B

  long long countB = 0, cautatPoz;
  for (long long i = 0; i < n - 1; i++)
  {
    if(j<=i) break;
    diferenta = B - v[i];
    cautatPoz = binarySearch(diferenta);
    if (cautatPoz - 1 > 0)
    {
      countB += (cautatPoz - i);
    }
  }
  // determin numarul de perechi cu suma < A
  long long countA = 0;
  // reset j
  j = n - 1;
  for (long long i = 0; i < n - 2; i++)
  {
    if(j<=i) break;
    diferenta = A - v[i] - 1;
    cautatPoz = binarySearch(diferenta);
    if (cautatPoz - 1 > 0)
    {
      countA += (cautatPoz - i);
    }
  }
  // count = perechi <=B - perechi<A
  counter = countB - countA;
}

int main()
{
  citire();
  rezolvare();
  cout << counter;
  return 0;
}
