/* eslint-disable */

// Link cerinta:  https://drive.google.com/drive/u/0/folders/1gOOQLj1V1I51Vr4lY0riFS8nh4B_6ujs




#include <iostream>
#include <algorithm>
#include <fstream>
#include <vector>
#include <cmath>

using namespace std;

ifstream fin("cochilie.in");
ofstream fout("cochilie.out");

int main()
{
    int N, P, C;
    fin>> C;
    fin>> N;
    fin>> P;
    fin.close();
    P--; // matricea e 0-based
    bool verticala = false;
    int ultimaLinie;
    vector<vector<int>> dimensiuni(100,vector<int>(2,0));
    vector<vector<int>> dimensiuniCasete(100,vector<int>(4,0));
    dimensiuni[0][0]=1;
    dimensiuni[0][1]=1;

    for(int i = 1;i<N;i++){
        if(verticala==false) {
            dimensiuni[i][0] = dimensiuni[i-1][0];
            dimensiuni[i][1] = dimensiuni[i-1][1]+ dimensiuni[i-1][0];
            verticala=true;
        } else{
            dimensiuni[i][0] = dimensiuni[i-1][1]+ dimensiuni[i-1][0];
            dimensiuni[i][1] = dimensiuni[i-1][1];
            verticala=false;
        }
    }

    if(C==1){
      fout<< dimensiuni[N-1][0]<<" "<< dimensiuni[N-1][1];
      fout.close();
    } else{
      int directie=1, dreaptaJosLinie=0, dreaptaJosColoana=0, latura, ultimulIndex;
      // stanga sus
      dimensiuniCasete[0][0]=0;
      dimensiuniCasete[0][1]=0;
      // dreapta jos
      dimensiuniCasete[0][2]=0;
      dimensiuniCasete[0][3]=0;

      for(int i=1;i<N;i++)
      {
        ultimulIndex=i;
        if(directie%4==1){
          // latura
          latura=dreaptaJosLinie+1;
          // adaugare stanga sus
          dimensiuniCasete[i][0]=0;  // linia
          dimensiuniCasete[i][1]=dreaptaJosColoana+1; // coloana
          // adaugare dreapta jos
          dimensiuniCasete[i][2]=dimensiuniCasete[i][0]+latura-1; // linia
          dimensiuniCasete[i][3]=dimensiuniCasete[i][1]+latura-1; // coloana

          if(dreaptaJosLinie<dimensiuniCasete[i][2]) {
            dreaptaJosLinie=dimensiuniCasete[i][2];
          }
          if(dreaptaJosColoana<dimensiuniCasete[i][3]) {
            dreaptaJosColoana=dimensiuniCasete[i][3];
          }
          directie++;
        } else if(directie%4==2) {
          latura=dreaptaJosColoana+1;
          // adaugare stanga sus
          dimensiuniCasete[i][0]=dreaptaJosLinie+1;  // linia
          dimensiuniCasete[i][1]=0; // coloana
          // adaugare dreapta jos
          dimensiuniCasete[i][2]=dimensiuniCasete[i][0]+latura-1; // linia
          dimensiuniCasete[i][3]=dimensiuniCasete[i][1]+ latura-1; // coloana

          if(dreaptaJosLinie<dimensiuniCasete[i][2]) {
            dreaptaJosLinie=dimensiuniCasete[i][2];
          }
          if(dreaptaJosColoana<dimensiuniCasete[i][3]) {
            dreaptaJosColoana=dimensiuniCasete[i][3];
          }
          directie++;
        } else if(directie%4==3) {
          latura=dreaptaJosLinie+1;
          // adaugare stanga sus
          dimensiuniCasete[i][0]=0;  // linia
          dimensiuniCasete[i][1]=0; // coloana
          // adaugare dreapta jos
          dimensiuniCasete[i][2]=latura-1; // linia
          dimensiuniCasete[i][3]=latura-1; // coloana

          // actualizarea celorlalte coordonate:
          for(int j = 0;j<i;j++) {
            dimensiuniCasete[j][1]+= latura;  // coloana stanga sus
            dimensiuniCasete[j][3]+= latura;  // coloana dreapta jos
          }
          dreaptaJosColoana+=latura;
          directie++;
        } else if(directie%4==0) {
          latura=dreaptaJosColoana+1;
          // adaugare stanga sus
          dimensiuniCasete[i][0]=0;  // linia
          dimensiuniCasete[i][1]=0; // coloana
          // adaugare dreapta jos
          dimensiuniCasete[i][2]=latura-1; // linia
          dimensiuniCasete[i][3]=latura-1; // coloana

          // actualizarea celorlalte coordonate:
          for(int j = 0;j<i;j++) {
            dimensiuniCasete[j][0]+= latura;  // linia stanga sus
            dimensiuniCasete[j][2]+= latura;  // linia dreapta jos
          }
          dreaptaJosLinie+=latura;
          directie++;
        }
      }
      vector<int> result(0,0);
      bool gasit=false;
      int coloana=0;
      while(true){
        gasit=false;
        for(int i=0;i<=ultimulIndex;i++){
          if(dimensiuniCasete[i][0] <= P && dimensiuniCasete[i][2] >= P && dimensiuniCasete[i][1]<=coloana && dimensiuniCasete[i][3]>=coloana){
            result.push_back(i+1);
            coloana++;
            gasit=true;
          }
        }
        if(gasit!=true){
          break;
        }
      }
      for(int i=0;i<result.size();i++) {
        fout<< result[i]<< " ";
      }
      fout.close();
    } 
    
    return 0;
}
