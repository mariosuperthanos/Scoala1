
/* eslint-disable */
#include <iostream>
#include <algorithm>
#include <fstream>
#include <vector>
#include <cmath>
using namespace std;

ifstream fin("pachete_multe.in");
ofstream fout("pachete_multe.out");

int main()
{
  int n, spatiuCautat;
  fin >> n;
  vector<int> pachete(n + 2, 0), local(2, 0), memo(n+2, 0);
  for (int i = 1; i <= n; i++)
  { // nu e 0-based
  
    fin >> pachete[i];
    memo[pachete[i]]=i;
  }
  vector<vector<int>> res(0, vector<int>(2, 0));
  int spatiuLiber = n + 1, aux=0;
  fin.close();
  for (int i = 1; i <= n; i++)
  {
    if (pachete[i] == i)
    {
      continue;
    }
    local[0] = i;
    local[1] = spatiuLiber;
    if(local[0]!=local[1]){
      res.push_back(local);
    }
    // fac spatiu, mutand pachetul
    // update memo
    int valPachetuluiActual=pachete[i];
    memo[valPachetuluiActual]=spatiuLiber;
    aux = pachete[i];
    pachete[i] = pachete[spatiuLiber];
    pachete[spatiuLiber] = aux;
    spatiuLiber = i;

    // caut obiectul care vine pe indexul i
    // OPTIMIZARE: HASHMAP/ vector de frecventa pentru pozitii
    // for(int j=i+1;j<=n+1;j++) {
    //   if(pachete[j]==i) {
    //     spatiuCautat=j;
    //     break;
    //   }
    // }
    spatiuCautat=memo[i];
    

    local[0] = spatiuCautat;
    pachete[i]=pachete[spatiuCautat];
    pachete[spatiuCautat]=0;
    spatiuLiber=spatiuCautat;
    memo[pachete[i]]=i;
    local[1] = i;
    if(local[0]!=local[1]){
      res.push_back(local);
    }
  }
  int console = res.size();
  fout<< res.size()<< endl;
  for(int i=0;i<res.size();i++) {
    fout<< res[i][0]<< " "<< res[i][1]<< endl;
  }
  fout.close();
  return 0;
}
